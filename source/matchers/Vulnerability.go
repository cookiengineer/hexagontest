package matchers

import "encoding/binary"
import "encoding/hex"
import "hash/crc32"
import "strings"

type Vulnerability struct {
	Name string `json:"name"`
}

func NewVulnerability() Vulnerability {

	var vulnerability Vulnerability

	return vulnerability

}

func (vulnerability *Vulnerability) IsIdentical(value Vulnerability) bool {

	var result bool = false

	if vulnerability.Name == value.Name {
		result = true
	}

	return result

}

func (vulnerability *Vulnerability) IsValid() bool {

	var result bool = false

	if vulnerability.Name != "" {
		result = true
	}

	return result

}

func (vulnerability *Vulnerability) Matches(name string) bool {

	var matches_name bool = false

	if vulnerability.Name == name {
		matches_name = true
	} else if vulnerability.Name == "any" {
		matches_name = true
	}

	return matches_name

}

func (vulnerability *Vulnerability) SetName(value string) {
	vulnerability.Name = strings.TrimSpace(value)
}

func (vulnerability *Vulnerability) Hash() string {

	var hash string

	if vulnerability.Name != "" {

		checksum := crc32.ChecksumIEEE([]byte(vulnerability.Name))

		tmp := make([]byte, 4)
		binary.LittleEndian.PutUint32(tmp, checksum)
		hash = hex.EncodeToString(tmp)

	}

	return hash

}
